class Node {
    int item         moves_as isLocal(this) ? threadlocal : readonly;
    Node next        moves_as isLocal(this) ? threadlocal : readonly;

    Node(int item, Node next) {
      this.item = item;
      this.next = next;
    }
}

class Stack {

  Node head moves_as isLocal(this) ? threadlocal : guarded_by this;

  modifies this;
  ensures this.head == null;
  public Stack() {
    this.head = null;
  }

  modifies this;
  ensures this.head.next == old(this.head);
  ensures this.head.item == item;
  public void push(int item) {
    acquire(this);
    Node node = new Node(item, this.head);
    this.head = node;
    release(this);
  }

  modifies this;
  ensures old(this.head) != null && $result == old(this.head.item) && this.head == old(this.head.next);
  public int pop() {
    while (true) {
      acquire(this);
      if (this.head != null){
        break;
      }
      release(this);
      yield;
    }
    int value = this.head.item;
    this.head = this.head.next;
    release(this);
    return value;
  }


  /*
  modifies this;
  ensures old(this.head) != null ==> ($result == old(this.head.item) && this.head == old(this.head.next));
  ensures old(this.head) == null ==> $result == -1;
  public int pop() {
    acquire(this);
      if (this.head == null) {
        release(this);
        return -1;
      }
    int value = this.head.item;
    this.head = this.head.next;
    release(this);
    return value;
  }*/


}
