class Node {
	int item         moves_as isLocal(this) ? threadlocal : readonly;
	Node next        moves_as isLocal(this) ? threadlocal : readonly;

	ghost Seq<int> spec moves_as E;

	invariant this.next == null ==> this.spec == SeqUnit(this.item);
	invariant this.next != null ==> this.spec == SeqConcat(SeqUnit(this.item), this.next.spec);

	Node(int item, Node next) {
		this.item = item;
		this.next = next;
		this.spec = this.next == null ? SeqUnit(this.item) : SeqConcat(SeqUnit(this.item), this.next.spec);
	}
}

class Stack {

  volatile Node head moves_as isLocal(this)
      ? threadlocal
      : N;

	ghost Seq<int> spec moves_as E;

	invariant this.head == null ==> this.spec == SeqEmpty<int>();
	invariant this.head != null ==> this.spec == this.head.spec;


	modifies this;
	ensures this.spec == SeqEmpty<int>();
	public Stack() {
		this.head = null;
	}

	modifies this;
	ensures this.spec == SeqConcat<int>(SeqUnit(item), old(this.spec));
	public void push(int item) {
        while (true)
        {
            Node next = this.head;
            Node nu = new Node(item, next);
            yield; // needed because head has ABA races: other thread pushes/pops item here...
            if (cas(this, head, next, nu)) {
				this.spec = SeqConcat<int>(SeqUnit(item), this.spec);
				break;
            }
    	    yield;
          }
	}

	modifies this;
	ensures old(this.spec) == SeqConcat<int>(SeqUnit($result), this.spec);
	public int pop() {
	    while (true)
		{
	        Node head = this.head;
	        if (head != null){
			yield; // needed because head has ABA races: other thread pushes/pops item here...
			Node next = head.next;
			if (cas(this, head, head, next)) {
				this.spec = SeqExtract(this.spec, 1, SeqLen(this.spec)-1);
				return head.item;
			}
		}
			yield;
	    }
	}
}
