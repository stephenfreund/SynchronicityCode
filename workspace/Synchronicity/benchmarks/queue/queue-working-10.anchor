#define Inv(a,h,t)  (a != null && a.length == 512 && 0 <= h && h < 512 && 0 <= t && t < 512)
#define Pos(x)      ((x) % this.elems.length)
#define isEmpty()   (this.tail == this.head)
#define isFull()    (Pos(this.tail + 1) == this.head)
#define isInHeadToTail(x)  (!isEmpty() && (((this.head) <= index && index < (this.tail)) || ((this.tail) <= (this.head) && (index < (this.tail) || (this.head) <= index))))
#define isInTailToHead(x)  (!isFull() && (((this.head) <= (this.tail) && (index < (this.head) || (this.tail) <= index)) || ((this.tail) <= index && index < (this.head))))

#define isEmptier(x)  ((this.tail < this.head ==> this.head <= x || x <= this.tail) && \
                       (this.head <= this.tail ==> (this.head <= x && x <= this.tail)))
#define isFuller(x)   ((this.tail < this.head ==> this.tail <= newValue && newValue < this.head) &&\
                       (this.head < this.tail ==> (this.tail <= newValue || newValue < this.head)))

// no mod head/tail
axiom (forall int h, int t :: { h % 512, t % 512 } 0 <= h && h <= t && t < h + 512 && h % 512 == t % 512 ==> (h == t));
axiom (forall int h, int t :: { h % 512, t % 512 } 0 <= h && h < t && t <= h + 512 && h % 512 == t % 512 ==> (t == h + 512));

// % head/tail

axiom (forall int x :: { (x + 1) % 512 } (0 <= x && x < 511 ==> (x + 1) % 512 == x + 1) && (x == 511 ==> (x + 1) % 512 == 0));
axiom (forall int x, int y :: { (512 + (y + 1) % 512 - x) % 512 } 0 <= x && x < 512 && 0 <= y && y < 512 && (y + 1) % 512 != x ==> (512 + y - x) % 512 + 1 == (512 + (y + 1) % 512 - x) % 512);


class Queue {

    array T = int[moves_as
        Inv(this.elems, this.head, this.tail) &&
            (tid == 1 && isInTailToHead(index) ||
            (tid == 2 && isInHeadToTail(inex))) ? B :
        E
     ]


    [T] elems moves_as isLocal(this) ? threadlocal : readonly;
    invariant this.elems != null;

    volatile int tail
      moves_as isRead() ? tid == 1 ? B : N
                        : tid == 1 && !isFull() && newValue == Pos(this.tail + 1) ? N : E
            yielding Inv(this.elems, this.head, this.tail) ==> (Inv(this.elems, this.head, newValue) && (tid == 2 ==> isFuller(newValue)));

    volatile int head
    moves_as isRead() ? tid == 2 ? B : N
                      : tid == 2 && !isEmpty() && newValue == Pos(this.head + 1) ? N : E
    yielding Inv(this.elems, this.head, this.tail) ==> (Inv(this.elems, newValue, this.head)) && (tid == 1 ==> isEmptier(newValue));



    // REP INV:
    invariant Inv(this.elems, this.head, this.tail);

    // ABSTRACT VARS:
    ghost Seq<int> spec moves_as E;

    // INVARIANTS TO MAP CONCRETE -> ABSTRACT
    invariant SeqLen(this.spec) == (512 + (this.tail - this.head))%512;
 //    invariant (forall int i :: { i % 512 } this.head <= i && i < this.head + SeqLen(this.spec) ==> (this.elems[i % 512] == SeqNth(this.spec, i - this.head)));

    // ALL SPECS WRITTEN IN TERMS OF ABSTRACT VARS
    ensures this.spec == SeqEmpty<int>();
    public Vector() {
        this.spec = SeqEmpty<int>();
        this.elems = new [T](512);
    }

    requires tid == 1;
    modifies this, this.elems;  // slightly unfortunate -> still refers to concrete state...
    ensures this.spec == old(this.spec) || (this.spec == SeqConcat(old(this.spec), SeqUnit(x)));
    public void enqueue(int x) {
        if (!isFull()) {
            yield;
            this.elems[this.tail] = x;
            this.spec = SeqConcat(this.spec, SeqUnit(x));
            this.tail = (this.tail + 1) % 512;
        }
    }

    requires tid == 2;
    modifies this, this.elems;  // slightly unfortunate -> still refers to concrete state...
    ensures ($result == 0 && this.spec == old(this.spec))
            || ($result == old(SeqNth(this.spec, 0)) && this.spec == SeqExtract(old(this.spec), 1, SeqLen(old(this.spec))-1));
    public int dequeue() {
        if (!isEmpty()) {
            yield;
            int result = this.elems[this.head];
            this.head = (this.head + 1) % 512;
            this.spec = SeqExtract(this.spec, 1, SeqLen(this.spec)-1);
            return result;
        } else {
            return 0;
        }
    }

}