/*
 ./v.sh benchmarks/queue/crap-20-mod.anchor  -B=-trace -B=-timeLimit:900 -errorDotsâ€©
 ./v.sh benchmarks/queue/crap-20-mod.anchor  -B=-trace -B=-timeLimit:900 -errorDots -verify=Sequential
*/

/*
open log/errors-frames.html
 */

#define Inv(a,h,t)  (a != null && a.length == 16 && 0 <= h && h < 16 && 0 <= t && t < 16)
#define Pos(x)      (MOD(x))
#define isEmpty(h,t)   ((t) == (h))
#define isFull(h,t)    (INC(t) == (h))

#define isInHeadToTail(x)  (!isEmpty(this.head, this.tail) && \
        (((this.head) <= index && index < (this.tail)) || ((this.tail) <= (this.head) && (index < (this.tail) || (this.head) <= index))))
#define isInTailToHead(x)  (!isFull(this.head, this.tail) &&  (((this.head) <= (this.tail) && (index < (this.head) || (this.tail) <= index)) || ((this.tail) <= index && index < (this.head))))


#define isEmptier(x)  ((this.tail < this.head ==> this.head <= x || x <= this.tail) && \
                       (this.head <= this.tail ==> (this.head <= x && x <= this.tail)))
#define isFuller(x)   ((this.tail < this.head ==> this.tail <= newValue && newValue < this.head) &&\
                       (this.head <= this.tail ==> (this.tail <= newValue || newValue < this.head)))



#define INC(x) ((x) == 15 ? 0 : ((x) + 1))
#define MOD(x) ((0 <= (x) && (x) < 16) ? (x) : ((x) - 16))

class Queue {

    array T = int[moves_as isLocal(this) ? B :
    Inv(this.elems, this.head, this.tail) &&
            (tid == 1 && isInTailToHead(index) ||
            (tid == 2 && isInHeadToTail(index))) ? B :
    E
     ]

    [T] elems moves_as isLocal(this) ? threadlocal : readonly;

    volatile int tail
      moves_as  isLocal(this) ? B : isRead() ? tid == 1 ? B : N
                        : tid == 1 && !isFull(this.head, this.tail) && newValue == INC(this.tail) ? N : E
      yielding ((tid == 1 || tid == 2) && Inv(this.elems, this.head, this.tail))
                 ==> (Inv(this.elems, this.head, newValue)
                      && (tid == 1 ==> this.tail == newValue)
                      && (tid == 2 ==> isFuller(newValue) && (!isEmpty(this.head, this.tail) ==> !isEmpty(this.head, newValue))));



    volatile int head
      moves_as  isLocal(this) ? B : isRead() ? tid == 2 ? B : N
                        : tid == 2 && !isEmpty(this.head, this.tail) && newValue == INC(this.head) ? N : E
      yielding ((tid == 1 || tid == 2) && Inv(this.elems, this.head, this.tail) ==>
            (Inv(this.elems, newValue, this.tail)
             && (tid == 2 ==> this.head == newValue)
             && (tid == 1 ==> isEmptier(newValue) && (!isFull(this.head, this.tail) ==> !isFull(newValue, this.tail)))));



    // REP INV:

    // ABSTRACT VARS:
    ghost Seq<int> spec moves_as isLocal(this) ? B : E;

    // invariant this.elems != null;
    invariant Inv(this.elems, this.head, this.tail); // (a != null && a.length == 16 && 0 <= h && h < 16 && 0 <= t && t < 16)
    invariant SeqLen(this.spec) == MOD(16 + this.tail - this.head);


    // INVARIANTS TO MAP CONCRETE -> ABSTRACT
    invariant this.head <= this.tail ==> (forall int i :: this.head <= i && i < this.tail ==> (this.elems[i] == SeqNth(this.spec, i - this.head)));
    invariant this.tail <  this.head ==> (forall int i :: this.head <= i && i < 16        ==> (this.elems[i] == SeqNth(this.spec, i - this.head)));
    invariant this.tail <  this.head ==> (forall int i :: 16 <= i        && i < 16 - this.head + this.tail ==> (this.elems[i] == SeqNth(this.spec, i - this.head)));

    // ALL SPECS WRITTEN IN TERMS OF ABSTRACT VARS
    ensures this.spec == SeqEmpty<int>();
    public Vector() {
        this.spec = SeqEmpty<int>();
        this.elems = new [T](16);
        assert SeqLen(this.spec) == 0;
    }


    requires tid == 1;
    modifies this, this.elems;  // slightly unfortunate -> still refers to concrete state...
    ensures this.spec == old(this.spec) || (this.spec == SeqConcat(old(this.spec), SeqUnit(x)));
    public void enqueue(int x) {
        if (!isFull(this.head, this.tail)) {
            yield;
            this.elems[this.tail] = x;
            this.spec = SeqConcat(this.spec, SeqUnit(x));
            this.tail = INC(this.tail);
        }
    }

    requires tid == 2;
    modifies this, this.elems;  // slightly unfortunate -> still refers to concrete state...
    ensures ($result == 0 && this.spec == old(this.spec))
            || ($result == old(SeqNth(this.spec, 0)) && this.spec == SeqExtract(old(this.spec), 1, SeqLen(old(this.spec))-1));
    public int dequeue() {
        if (!isEmpty(this.head, this.tail)) {
            yield;
            int result = this.elems[this.head];
            int len = SeqLen(this.spec);
            this.spec = SeqExtract(this.spec, 1, SeqLen(this.spec)-1);
            this.head = INC(this.head);
            return result;
        } else {
            return 0;
        }
    }
}