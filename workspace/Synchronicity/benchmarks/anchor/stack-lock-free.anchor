
class Node {
    int value  moves_as isLocal(this) ? threadlocal : readonly;
    Node next  moves_as isLocal(this) ? threadlocal : readonly;

    //   invariant this.next != this;

    Node(int value, Node next) {
        this.value = value;
        this.next = next;
    }
}

class Stack {

    volatile Node top moves_as isLocal(this)
      ? threadlocal
      : N;

    public Stack() {
        this.top = null;
    }

    public void push(int v) {
        while (true)
        {
            Node next = this.top;
            Node nu = new Node(v, next);
            yield; // needed because top has ABA traces: other thread pushes/pops item here...
            if (cas(this, top, next, nu)) {
                break;
            }
        }
    }

    public int pop() {
        while (true)
        {
            Node top = this.top;
            if (top == null) {
                return -1;
            }
            yield; // needed because top has ABA traces: other thread pushes/pops item here...
            Node next = top.next;
            if (cas(this, top, top, next)) {
                return top.value;
            }
        }
	}
}
