///: ignore

class Node {
    int value isLocal(this) ? threadlocal : readonly;
    Node next  isLocal(this) ? threadlocal : write_guarded_by this.owner;
    Lock owner isLocal(this) ? threadlocal : readonly;

    invariant this.owner == this.next.owner;
    invariant this.owner != null;
    invariant this.next != null;

    Node(int value, Node next, Lock owner) {
      this.value = value;
      this.next = next;
      this.owner = owner;
    }
}

class Lock {

}

class Queue {

    Lock enqLock isLocal(this) ? threadlocal : readonly
           yields_as this.enqLock == newValue;

    Lock deqLock isLocal(this) ? threadlocal : readonly
           yields_as this.deqLock == newValue;

    Node head isLocal(this) ? threadlocal : guarded_by this.deqLock;
    Node tail isLocal(this) ? threadlocal : guarded_by this.enqLock;

    int size (isRead ? (write_guarded_by this)
                           : (holds(this.enqLock) && newValue == this.size - 1 && 0 < this.size && this.size <= this.capacity ? write_guarded_by this :
                              holds(this.deqLock) && newValue == this.size + 1 && 0 <= this.size && this.size < this.capacity ? write_guarded_by this : E))

        yields_as (0 <= this.size && this.size <= this.capacity) ==>
                   ((0 <= newValue && newValue <= this.capacity) &&
                    (holds(this.enqLock) ==> this.size <= newValue && newValue <= this.capacity) &&
                    (holds(this.deqLock) ==> 0 <= newValue && newValue <= this.size));

    int capacity readonly
        yields_as this.capacity == newValue;


    invariant this.head != null;
    invariant this.tail != null;
    invariant this.enqLock != null;
    invariant this.deqLock != null;

    invariant this.head.owner == this.enqLock;
    invariant this.tail.owner == this.enqLock;

    invariant this.capacity > 0;
    invariant 0 <= this.size && this.size <= this.capacity;

    invariant this.size < this.capacity ==> this.head.next != null;

    Queue() {
        this.enqLock = new Lock();
        this.deqLock = new Lock();
        Node tail = new Node(0, tail, this.enqLock);
        Node head = new Node(0, tail, this.enqLock);
        this.head = head;
        this.tail = tail;
        this.size = this.capacity;
    }

    // next two are from AtomicInteger -- could use cas instead...
    int getAndDecSize() {
      synchronized(this) {
        int s = this.size;
        assert 0 < s && s <= this.capacity;
        this.size = s - 1;
        return s;
      }
    }

    int getAndIncSize() {
      synchronized(this) {
        int s = this.size;
        this.size = s + 1;
        return s;
      }
    }

    public void enqueue(int value) {
      bool mustWakeDequeuers = false;
      Lock l = this.enqLock;
      synchronized(l) {
          while (true)
            invariant holds(l);
            invariant l == this.enqLock;
          {
            if (this.size > 0) {
              break;
            }
            wait(l);
          }
          Node e = new Node(value, this.tail.next, this.enqLock);
          yield;
          this.tail.next = e;
          yield;
          this.tail = e;
          yield;
          if (this.getAndDecSize() == this.capacity) {
            mustWakeDequeuers = true;
          }
      }
      yield;
      if (mustWakeDequeuers) {
        synchronized(this.deqLock) {
          // deqLock.signalAll();  --> basically a no-op for us.
        }
      }
    }

    public int dequeue() {
      bool mustWakeEnqueuers = false;
      int result;
      Lock l = this.deqLock;
      synchronized(l) {
          while (true)
            invariant holds(l);
            invariant l == this.deqLock;
          {
            if (this.size < this.capacity) {
              break;
            }
            wait(l);
          }
          yield;
          Node next = this.head.next;
          result = next.value;
          yield;
          this.head = next;
          yield;
          if (this.getAndIncSize() == 0) {
            mustWakeEnqueuers = true;
          }
      }
      yield;
      if (mustWakeEnqueuers) {
        synchronized(this.enqLock) {
          // deqLock.signalAll();  --> basically a no-op for us.
        }
      }
      return result;
    }
}
