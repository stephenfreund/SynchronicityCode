///: ignore

// hand-over-hand locking.

class Node {
    int item isLocal(this) ? threadlocal : readonly;
    Node next isLocal(this) ? threadlocal : guarded_by this;

    invariant INT_MIN <= this.item && this.item <= INT_MAX;

    // the next is bigger.  if no next, then we have INT_MAX
    invariant this.next != null ==> this.item < this.next.item;
    invariant this.next == null ==> this.item == INT_MAX;

    Node(int item, Node next) {
      this.item = item;
      this.next = next;
    }
}


class FineList {

    Node head isLocal(this) ? threadlocal : readonly;

    invariant this.head != null && this.head.item == INT_MIN;

    requires INT_MIN < item && item < INT_MAX;
    public void add(int item) {
        acquire(this.head);
        Node pred = this.head;
        Node curr = pred.next;
        acquire(curr);
        while (curr.item < item)
          invariant pred.item < item;
          invariant curr == pred.next;
          invariant isShared(pred) && holds(pred);
          invariant isShared(curr) && holds(curr);
        //  invariant forall Node n :: (n != curr && n != pred) ==> !holds(n);
        {
            release(pred);
            pred = curr;
            curr = curr.next;
            yield;
            acquire(curr);
        }
        if(item > curr.item) {
          Node node = new Node(item, curr);
          pred.next = node;
        }
        release(curr);
        release(pred);
    }
}
