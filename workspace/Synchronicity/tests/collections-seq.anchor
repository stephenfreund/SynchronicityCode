

class Cow {
    public void f() {
        Seq<int> s;
        Seq<Seq<int>> s2;
        s = SeqEmpty<int>();
        s = SeqUnit(4);
        assert SeqNth(s, 0) == 4;
        assert SeqLen(s) == 1;
    }


    public void f2() {
        Seq<int> s;
        Seq<int> t;
        s = SeqConcat(SeqUnit(1), SeqUnit(2));
        t = SeqConcat(SeqUnit(1), SeqUnit(2));
        assert s == t;
    }

    array S = int[moves_as guarded_by this]
    array T = Seq<int>[moves_as guarded_by this]

    public void f3() {
        synchronized(this) {
            [S]s = new[S] (0);
            [S]t = new[S] (0);
            //   s[0] = SeqConcat(SeqUnit(1), SeqUnit(2));
            //   yield;
            //   t[0] = SeqConcat(SeqUnit(1), SeqUnit(2));
            assert s == t;
        }
    }

    public void f4() {
        synchronized(this) {
            [T]s = new[T] (0);
            [T]t = new[T] (0);
         //   s[0] = SeqConcat(SeqUnit(1), SeqUnit(2));
         //   yield;
         //   t[0] = SeqConcat(SeqUnit(1), SeqUnit(2));
            assert s == t;
        }
    }

    public void f5() {
        Seq<int> s = SeqConcat(SeqUnit(1), SeqUnit(2));
        Seq<int> t = SeqConcat(s, SeqUnit(3));
        assert SeqExtract(t, 0, 1) == SeqUnit(1);
        assert SeqLen(t) == 3;
        assert SeqExtract(t, 1, 2) == SeqConcat(SeqUnit(2), SeqUnit(3));

    }

    requires SeqLen(s) > 0;
    requires 0 <= i && i < SeqLen(s) - 1;
    public void f6(Seq<int> s, int i) {
        Seq<int> t = SeqExtract(s, 1, SeqLen(s) - 1);
        assert SeqNth(t, i) == SeqNth(s, i + 1);
    }

}

///: (32.13): This assertion may not hold.
///: (43.13): This assertion may not hold.