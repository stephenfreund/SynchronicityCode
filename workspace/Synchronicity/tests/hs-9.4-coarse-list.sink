///: ignore

class Node {
  int key isLocal(this) ? threadlocal : readonly;
  int item isLocal(this) ? threadlocal : readonly;
  Node next isLocal(this) ? threadlocal : guarded_by global;
}

class CoarseList {

 	Node head isLocal(this) ? threadlocal : guarded_by global;
 	Node tail isLocal(this) ? threadlocal : guarded_by global;

  public bool add(int item) {
    Node pred;
    Node curr;
    int key = item;
    synchronized(this) {
      pred := this.head;
      curr := pred.next;
      int curr_key := curr.key;
      while (curr_key < key)
       invariant isShared(curr);
      {
        pred = curr;
        curr := curr.next;
        curr_key := curr.key;
      }
      if (key == curr_key) {
        return false;
      } else {
        Node node = new Node();
        node.key := item;
        node.item := item;
        node.next := curr;
        pred.next := node;
        return true;
      }
    }
  }



  public bool remove(int item) {
    Node pred;
    Node curr;
    int key = item;
    synchronized(this) {
      pred := this.head;
      curr := pred.next;
      int curr_key := curr.key;
      while (curr_key < key)
       invariant isShared(curr);
      {
        pred = curr;
        curr := curr.next;
        curr_key := curr.key;
      }
      if (key == curr_key) {
        Node t := curr.next;
        pred.next := t;
        return true;
      } else {
        return false;
      }
    }
  }

}

CoarseList global;