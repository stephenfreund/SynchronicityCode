
class Node {
    int key isLocal(this) ? threadlocal : readonly;
    int item isLocal(this) ? threadlocal : readonly;
    Node next isLocal(this) ? threadlocal : guarded_by global;
}

class CoarseList {

    Node head isLocal(this) ? threadlocal : guarded_by global;
    Node tail isLocal(this) ? threadlocal : guarded_by global;

    requires this == global;
    public bool add(int item) {
        Node pred;
        Node curr;
        int key = item;
        synchronized(this) {
            pred := this.head;
            curr := pred.next;
            int curr_key := curr.key;
            bool z = curr_key < key; while (z)
              invariant isShared(curr);
              invariant isShared(pred);
            {
                pred = curr;
                curr := curr.next;
                curr_key := curr.key; z = curr_key < key;
            }
            z = key == curr_key; if(z) {
                return false;
            } else {
                Node node = new Node();
                node.key := item;
                node.item := item;
                node.next := curr;
                pred.next := node;
                return true;
            }
        }
    }
}

CoarseList global;
