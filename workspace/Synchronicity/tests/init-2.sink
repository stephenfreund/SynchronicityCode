
class Key {
}

class Value {
    int x isLocal(this) ? threadlocal :whenever;

    invariant this.x == 3;

    void init() {
        this.x := 0;
        for (int i = 0; i != 3; i = i + 1)
            invariant this.x == i;
        {
            int t := this.x;
            t = t + 1;
            this.x := t;
        }
    }
}

class HashEntry {
}

class Segment {
    array SegmentArray = Value[isLocal(this) ? threadlocal : readonly]

    [SegmentArray{this}] segments  isLocal(this) ? threadlocal : readonly;

    invariant forall int i :: 0 <= i && i < this.segments.length ==> this.segments[i] != Value.null;

    void init() {
        [SegmentArray{this}] segments = new [SegmentArray{this}](16);
        for (int i = 0; i < 16; i = i + 1)
            invariant isLocal(segments);
            invariant forall int k :: 0 <= k && k < i ==> segments[k] != Value.null && isShared(segments[k]);
        {
            Value seg = new Value();
            seg.init();
            segments[i] := seg;
        }
        this.segments := segments;
    }


}

class ConcurrentHashMap {

    array SegmentArray = Segment[isLocal(this) ? threadlocal : readonly]

    [SegmentArray{this}] segments  isLocal(this) ? threadlocal : readonly;

    invariant forall int i :: 0 <= i && i < this.segments.length ==> this.segments[i] != Segment.null;

    void init() {
        [SegmentArray{this}] segments = new [SegmentArray{this}](16);
        for (int i = 0; i < segments.length; i = i + 1)
            invariant forall int k :: 0 <= k && k < i ==> (segments[k] != Segment.null && isShared(segments[k]));
            invariant isLocal(segments);
        {
            Segment seg = new Segment();
            seg.init();
            segments[i] := seg;
        }
        //assert forall int k :: 0 <= k && k < segments.length ==> segments[k] != Segment.null && isShared(segments[k]);
        this.segments := segments;
    }

}

class Main {
    public void run() {
        ConcurrentHashMap c = new ConcurrentHashMap();
        c.init();
    }
}
